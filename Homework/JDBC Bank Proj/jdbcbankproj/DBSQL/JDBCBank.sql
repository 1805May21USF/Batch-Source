/* JDBC BANK ASSIGNMENT */

/*DROP SEQUENCE*/
DROP SEQUENCE SEQ_CREATE_USER_ID;
DROP SEQUENCE SEQ_CREATE_BANK_ACCOUNT_ID;
DROP SEQUENCE SEQ_CREATE_TRANSACTION_ID;

/* CREATE SEQUENCES */
CREATE SEQUENCE SEQ_CREATE_USER_ID
MINVALUE 1
START WITH 1
INCREMENT BY 1
CACHE 10;

CREATE SEQUENCE SEQ_CREATE_BANK_ACCOUNT_ID
MINVALUE 1
START WITH 1
INCREMENT BY 1
CACHE 10;

CREATE SEQUENCE SEQ_CREATE_TRANSACTION_ID
MINVALUE 1
START WITH 1
INCREMENT BY 1
CACHE 10;


/* CALL SEQUENCE */
/*
INSERT INTO USER (USER_ID, USER_FNAME, USER_LNAME, USER_PASWD, USER_DOB, USER_TYPE_ID, USER_CREATED_DATE)
VALUES (SEQ_CREATE_USER_ID.NEXTVAL, 'ANNA', 'DULCE', 'ANNADULCE1234', '01-JAN-00', 1, '02-JUN-18');

INSERT INTO BANKACCOUNT (BANK_ACCOUNT_ID, USER_ID, BANK_ACCOUNT_BALANCE, BANK_ACCOUNT_CREATED_DATE, BANK_ACCOUNT_STATUS_ID)
VALUES (SEQ_CREATE_BANK_ACCOUNT_ID.NEXVAL, 1, 0.00, '02-JUN-18', 1);

INSERT INTO TRANSACTION (TRANSACTION_ID, USER_ID, TRANSACTION_TYPE_ID, TRANSACTION_AMOUNT, TRANSACTION_DATE)
VALUES (1, 1, 1, 1.00, '02-JUN-18');
*/


/* CREATE TABLES */

CREATE TABLE USER_TYPE(
USER_TYPE_ID INTEGER NOT NULL,
USER_TYPE VARCHAR2(10) NOT NULL,
CONSTRAINT PK_USER_TYPE PRIMARY KEY (USER_TYPE_ID)
);

CREATE TABLE USER_STATUS(
USER_STATUS_ID INTEGER NOT NULL,
USER_STATUS VARCHAR(50) NOT NULL,
CONSTRAINT PK_USER_STATUS_ID PRIMARY KEY (USER_STATUS_ID)
);

CREATE TABLE USERS(
USER_ID INTEGER NOT NULL,
USERNAME VARCHAR2(50) NOT NULL,
USER_FNAME VARCHAR2(50),
USER_LNAME VARCHAR2(50),
USER_PASWD VARCHAR2(50),
USER_DOB DATE,
USER_TYPE_ID INTEGER,
USER_STATUS_ID INTEGER,
USER_CREATED_DATE DATE,
CONSTRAINT PK_USER_ID PRIMARY KEY (USER_ID),
CONSTRAINT FK_USER_TYPE_ID FOREIGN KEY (USER_TYPE_ID) 
REFERENCES USER_TYPE(USER_TYPE_ID),
CONSTRAINT FK_USER_STATUS_ID FOREIGN KEY (USER_STATUS_ID)
REFERENCES USER_STATUS(USER_STATUS_ID),
CONSTRAINT UQ_USERNAME UNIQUE (USERNAME)
);


CREATE TABLE BANKACCOUNTSTATUS(
BANK_ACCOUNT_STATUS_ID INTEGER NOT NULL,
BANK_ACCOUNT_STATUS VARCHAR2(50) NOT NULL,
CONSTRAINT PK_BANK_ACCOUNT_STATUS_ID PRIMARY KEY (BANK_ACCOUNT_STATUS_ID)
);

CREATE TABLE BANKACCOUNT(
BANK_ACCOUNT_ID INTEGER NOT NULL,
USER_ID INTEGER NOT NULL,
BANK_ACCOUNT_BALANCE NUMBER,
BANK_ACCOUNT_CREATED_DATE DATE,
BANK_ACCOUNT_STATUS_ID INTEGER,
CONSTRAINT PK_BANK_ACCOUNT_ID PRIMARY KEY (BANK_ACCOUNT_ID),
CONSTRAINT FK_BANK_ACCOUNT_STATUS_ID FOREIGN KEY (BANK_ACCOUNT_STATUS_ID) 
REFERENCES BANKACCOUNTSTATUS(BANK_ACCOUNT_STATUS_ID),
CONSTRAINT FK_USER_ID FOREIGN KEY (USER_ID)
REFERENCES USERS(USER_ID)
);




CREATE TABLE TRANSACTION_TYPE(
TRANSACTION_TYPE_ID INTEGER NOT NULL,
TRANSACTION_TYPE VARCHAR2(20) NOT NULL,
CONSTRAINT PK_TRANSACTION_TYPE_ID PRIMARY KEY (TRANSACTION_TYPE_ID)
);


CREATE TABLE TRANSACTIONS(
TRANSACTION_ID INTEGER NOT NULL,
USER_ID INTEGER NOT NULL,
TRANSACTION_TYPE_ID INTEGER,
TRANSACTION_AMOUNT NUMBER,
TRANSACTION_DATE DATE,
CONSTRAINT PK_TRANSACTION_ID PRIMARY KEY (TRANSACTION_ID),
CONSTRAINT FK_USER_ID_IN_T FOREIGN KEY (USER_ID)
REFERENCES USERS(USER_ID),
CONSTRAINT FK_TRANSACTION_TYPE_ID FOREIGN KEY (TRANSACTION_TYPE_ID)
REFERENCES TRANSACTION_TYPE(TRANSACTION_TYPE_ID)
);




/* View Tables */
SELECT * FROM USERS;
SELECT * FROM BANKACCOUNT;
SELECT * FROM TRANSACTIONS;
SELECT * FROM TRANSACTION_TYPE;
SELECT * FROM USER_TYPE;
SELECT * FROM USER_STATUS;
SELECT * FROM BANKACCOUNTSTATUS;



/* Insert Data Into USER_STATUS table */
INSERT INTO USER_STATUS (USER_STATUS_ID, USER_STATUS)
VALUES (1, 'ACTIVE');

INSERT INTO USER_STATUS (USER_STATUS_ID, USER_STATUS)
VALUES (2, 'CLOSED');

/* Insert Data Into USER_TYPE Lookup Table */
INSERT INTO USER_TYPE (USER_TYPE_ID, USER_TYPE)
VALUES (1, 'SUPERUSER');

INSERT INTO USER_TYPE (USER_TYPE_ID, USER_TYPE)
VALUES (2, 'CUSTOMER');

/* Insert Data Into BANKACCOUNTSTATUS Lookup Table */
INSERT INTO BANKACCOUNTSTATUS (BANK_ACCOUNT_STATUS_ID, BANK_ACCOUNT_STATUS)
VALUES (1, 'ACTIVE');

INSERT INTO BANKACCOUNTSTATUS (BANK_ACCOUNT_STATUS_ID, BANK_ACCOUNT_STATUS)
VALUES (2, 'CLOSED');


SELECT * FROM USERS U
JOIN USER_TYPE UT ON U.USER_TYPE_ID = UT.USER_TYPE_ID
JOIN USER_STATUS US ON U.USER_STATUS_ID = US.USER_STATUS_ID;

SELECT * FROM USER_TYPE;
SELECT * FROM USER_STATUS;

SELECT * FROM USERS
ORDER BY USER_ID;

UPDATE USERS
SET USER_STATUS_ID = 2
WHERE USER_ID = 24;

/* Insert 1st Superuser */
INSERT INTO USERS (USER_ID, USERNAME, USER_FNAME, USER_LNAME, USER_PASWD, USER_DOB, USER_TYPE_ID, USER_STATUS_ID, USER_CREATED_DATE)
VALUES (SEQ_CREATE_USER_ID.NEXTVAL, 'ANNAARBOR', 'ANNA', 'ARBOR', 'ANNAARBOR01JAN00', '01-JAN-00', 1, 1, SYSDATE);

/* VIEW USER */
SELECT * FROM USERS U
JOIN USER_TYPE UT ON U.USER_TYPE_ID = UT.USER_TYPE_ID
JOIN USER_STATUS US ON U.USER_STATUS_ID = US.USER_STATUS_ID;


/*
DELETE FROM USERS
WHERE USER_ID = 1;

UPDATE USERS
SET USER_ID = 1
WHERE USER_ID = 2;
*/


/* INSERT 1st BANK ACCOUNT */
INSERT INTO BANKACCOUNT (BANK_ACCOUNT_ID, USER_ID, BANK_ACCOUNT_BALANCE, BANK_ACCOUNT_CREATED_DATE, BANK_ACCOUNT_STATUS_ID)
VALUES (SEQ_CREATE_BANK_ACCOUNT_ID.NEXTVAL, 1, 0.00, SYSDATE, 1);


SELECT * FROM BANKACCOUNT B
JOIN USERS U ON B.USER_ID = U.USER_ID
JOIN BANKACCOUNTSTATUS BAS ON B.BANK_ACCOUNT_STATUS_ID = BAS.BANK_ACCOUNT_STATUS_ID;



SELECT * FROM BANKACCOUNT
ORDER BY USER_ID;

SELECT * FROM BANKACCOUNTSTATUS;

SELECT * FROM BANKACCOUNT
WHERE USER_ID = 28
ORDER BY BANK_ACCOUNT_ID;


SELECT * FROM BANKACCOUNT WHERE USER_ID = 28 ORDER BY BANK_ACCOUNT_ID;

UPDATE BANKACCOUNT
SET BANK_ACCOUNT_STATUS_ID = 2
WHERE BANK_ACCOUNT_ID = 13;

UPDATE BANKACCOUNT SET BANK_ACCOUNT_BALANCE = (SELECT BANK_ACCOUNT_BALANCE FROM BANKACCOUNT WHERE BANK_ACCOUNT_ID = 14) + .50 WHERE USER_ID = 28 AND BANK_ACCOUNT_ID = 14 AND BANK_ACCOUNT_STATUS_ID = 1;

/* INSERT Transaction Types */
INSERT INTO TRANSACTION_TYPE (TRANSACTION_TYPE_ID, TRANSACTION_TYPE)
VALUES (1, 'DEPOSIT');

INSERT INTO TRANSACTION_TYPE (TRANSACTION_TYPE_ID, TRANSACTION_TYPE)
VALUES (2, 'WITHDRAW');

INSERT INTO TRANSACTION_TYPE (TRANSACTION_TYPE_ID, TRANSACTION_TYPE)
VALUES (3, 'TRANSFER');

SELECT * FROM TRANSACTION_TYPE;


/* INSERT Transactions */
INSERT INTO TRANSACTIONS (TRANSACTION_ID, USER_ID, TRANSACTION_TYPE_ID, TRANSACTION_AMOUNT, TRANSACTION_DATE)
VALUES (SEQ_CREATE_TRANSACTION_ID.NEXTVAL, 11, 1, 1.00, SYSDATE);

INSERT INTO TRANSACTIONS (TRANSACTION_ID, USER_ID, TRANSACTION_TYPE_ID, TRANSACTION_AMOUNT, TRANSACTION_DATE)
VALUES (SEQ_CREATE_TRANSACTION_ID.NEXTVAL, 11, 2, .50, SYSDATE);

INSERT INTO TRANSACTIONS (TRANSACTION_ID, USER_ID, TRANSACTION_TYPE_ID, TRANSACTION_AMOUNT, TRANSACTION_DATE)
VALUES (SEQ_CREATE_TRANSACTION_ID.NEXTVAL, 11, 3, .25, SYSDATE);



SELECT * FROM TRANSACTIONS T
JOIN TRANSACTION_TYPE TY ON T.TRANSACTION_TYPE_ID = TY.TRANSACTION_TYPE_ID ;




/* STORED PROCEDURES */

-- CHECK USERNAME --
CREATE OR REPLACE FUNCTION CHECKUSERNAME(UNAME IN VARCHAR2)
RETURN VARCHAR2
IS URESULTS VARCHAR2(50);
BEGIN
    SELECT USERNAME
    INTO URESULTS
    FROM USERS
    WHERE USERNAME = UNAME;
    RETURN URESULTS;
END CHECKUSERNAME;
/


/* Check if username: ANNAARBOR exists. If not, return 'None'.*/
SELECT NVL(CHECKUSERNAME('ANNAARBOR'), 'NONE') FROM DUAL;






/* Check if username-password combo: ANNAARBOR and ANNAARBOR01JAN00 exists. If not, return 'None'.*/
SELECT NVL(CHECKUSERNAMEPASS('ANNAARBOR'), 'NONE') FROM DUAL;

SELECT * FROM USERS;


-- CREATE USER --
CREATE OR REPLACE PROCEDURE CREATEUSER(FNAME IN VARCHAR2, LNAME IN VARCHAR2, PASSWD IN VARCHAR2, 
DOB IN DATE, USERTYPEID IN INTEGER, USERSTATUSID IN INTEGER)
AS
BEGIN
INSERT INTO USERS (USER_ID, USER_FNAME, USER_LNAME, USER_PASWD, USER_DOB, USER_TYPE_ID, USER_STATUS_ID, USER_CREATED_DATE)
VALUES (SEQ_CREATE_USER_ID.NEXTVAL, FNAME, LNAME, PASSWD, DOB, USERTYPEID, USERSTATUSID, SYSDATE);
COMMIT;
END;
/




SELECT USER_ID FROM USERS
WHERE USER_FNAME = 'JACK';