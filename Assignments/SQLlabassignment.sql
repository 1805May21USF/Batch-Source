--2.1 SELECT 
SELECT * FROM EMPLOYEE;

SELECT * FROM EMPLOYEE 
WHERE LASTNAME = 'KING';

SELECT * FROM EMPLOYEE 
WHERE FIRSTNAME = 'ANDREW' AND REPORTSTO IS NULL;

--2.2 ORDER BY
SELECT * FROM ALBUM 
ORDER BY TITLE DESC;

SELECT FIRSTNAME FROM CUSTOMER 
ORDER BY CITY ASC;

--2.3 INSERT INTO
INSERT INTO GENRE 
VALUES (26, 'GLITCHSTEP');
INSERT INTO GENRE 
VALUES (27, 'CHIPSTEP');

INSERT INTO EMPLOYEE 
VALUES (9, 'HARTMAN', 'BILLY', 'IT STAFF', NULL, NULL, NULL, NULL, NULL, 'AB', NULL, NULL, NULL, NULL, NULL);
INSERT INTO EMPLOYEE 
VALUES (10, 'JOHNSON', 'BOB', 'IT STAFF', NULL, NULL, NULL, NULL, NULL, 'AB', NULL, NULL, NULL, NULL, NULL);

INSERT INTO CUSTOMER (CUSTOMERID, LASTNAME, FIRSTNAME, EMAIL) 
VALUES (60, 'HARTMAN', 'BILLY', 'EMAIL@DOMAIN.COM');
INSERT INTO CUSTOMER (CUSTOMERID, LASTNAME, FIRSTNAME, EMAIL) 
VALUES (61, 'JOHNSON', 'BOB', 'EMAIL@DOMAIN.COM');

--2.4 UPDATE
UPDATE CUSTOMER 
SET FIRSTNAME = 'Robert', LASTNAME = 'Walter'
WHERE FIRSTNAME = 'Aaron' AND LASTNAME = 'Mitchell';

UPDATE ARTIST
SET NAME = 'CCR'
WHERE NAME = 'Creedence Clearwater Revival';

--2.5 LIKE
SELECT * FROM INVOICE
WHERE BILLINGADDRESS LIKE 'T%';

--2.6 BETWEEN
SELECT * FROM INVOICE
WHERE TOTAL BETWEEN 15 AND 50;

SELECT * FROM EMPLOYEE
WHERE HIREDATE BETWEEN TO_DATE('01-JUN-2003', 'DD-MM-YYYY')
AND TO_DATE('01-MAR-2004', 'DD-MM-YYYY');

--2.7 DELETE
DELETE FROM INVOICELINE WHERE INVOICEID IN (
    SELECT INVOICE.INVOICEID FROM INVOICE
    JOIN CUSTOMER 
    ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID
    WHERE CUSTOMER.FIRSTNAME = 'Robert' AND CUSTOMER.LASTNAME = 'Walter'
);

DELETE FROM INVOICE WHERE INVOICEID IN (
    SELECT INVOICE.INVOICEID FROM INVOICE
    JOIN CUSTOMER 
    ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID
    WHERE CUSTOMER.FIRSTNAME = 'Robert' AND CUSTOMER.LASTNAME = 'Walter'
);

DELETE FROM CUSTOMER WHERE FIRSTNAME = 'Robert' AND CUSTOMER.LASTNAME = 'Walter';


--3.1 SYSTEM DEFINED FUNCTIONS
CREATE OR REPLACE FUNCTION getCurrentDate 
RETURN DATE IS
BEGIN
RETURN SYSDATE;
END;
/
SELECT getCurrentDate FROM DUAL;

CREATE OR REPLACE FUNCTION getLength
(NAME VARCHAR2) 
RETURN VARCHAR IS
BEGIN
RETURN LENGTH(NAME);
END;
/
SELECT getLength(NAME) FROM MEDIATYPE;

--3.2 SYSTEM DEFINED AGGREGATE FUNCTIONS
CREATE OR REPLACE FUNCTION averageTotal
RETURN NUMBER AS 
AVERAGE_TOTAL NUMBER(10, 2);
BEGIN
SELECT AVG(TOTAL) INTO AVERAGE_TOTAL FROM INVOICE;
RETURN AVERAGE_TOTAL;
END;
/
SELECT averageTotal FROM DUAL;

CREATE OR REPLACE FUNCTION mostExpensiveTrack
RETURN NUMBER AS
MOST_EXPENSIVE NUMBER(10,2);
BEGIN
SELECT MAX(UNITPRICE)INTO MOST_EXPENSIVE FROM TRACK;
RETURN MOST_EXPENSIVE;
END;
/
SELECT mostExpensiveTrack FROM DUAL;

--3.3 USER DEFINED SCALAR FUNCTIONS
CREATE OR REPLACE FUNCTION averagePrice
RETURN NUMBER AS
AVERAGE_PRICE NUMBER(10,2);
BEGIN
    SELECT AVG(UNITPRICE) INTO AVERAGE_PRICE FROM INVOICELINE;
    RETURN AVERAGE_PRICE;
END;
/
SELECT averagePrice FROM DUAL;

--3.4 USER DEFINED TABLE VALUED FUNCTIONS
CREATE OR REPLACE FUNCTION PEOPLE_AFTER_DATE
RETURN SYS_REFCURSOR
AS
RESULTS SYS_REFCURSOR;
BEGIN
OPEN RESULTS FOR
    SELECT * FROM EMPLOYEE
    WHERE BIRTHDATE > TO_DATE('1968-01-01', 'YYYY-MM-DD');
    RETURN RESULTS;
END;
/
SELECT PEOPLE_AFTER_DATE FROM DUAL;

--4.1 BASIC STORED PROCEDURE
CREATE OR REPLACE PROCEDURE first_last
AS
    C1 SYS_REFCURSOR;
BEGIN
OPEN C1 FOR
    SELECT FIRSTNAME, LASTNAME 
    FROM EMPLOYEE;
    DBMS_SQL.RETURN_RESULT(C1);
END;
/
EXECUTE first_last;

--4.2 STORED PROCEDURE INPUT PARAMETERS
CREATE OR REPLACE PROCEDURE updatePersonal
(FNAME IN VARCHAR2, LNAME IN VARCHAR2)
AS 
BEGIN
UPDATE EMPLOYEE 
SET FIRSTNAME = 'BILLY', LASTNAME = 'JACKSON'
WHERE FIRSTNAME = FNAME AND LASTNAME = LNAME;
COMMIT;
END;
/
EXECUTE updatePersonal('BILLY', 'JOHNSON');

CREATE OR REPLACE PROCEDURE managers
(EMPID IN NUMBER)
AS
    C1 SYS_REFCURSOR;
BEGIN
OPEN C1 FOR
    SELECT A.EMPLOYEEID, B.FIRSTNAME AS MANAGER_FIRST, B.LASTNAME AS MANAGER_LAST
    FROM EMPLOYEE A
    JOIN EMPLOYEE B
    ON B.EMPLOYEEID = A.REPORTSTO
    WHERE A.EMPLOYEEID = EMPID;
    DBMS_SQL.RETURN_RESULT(C1);
END;
/

DECLARE
EMPID NUMBER;
BEGIN
    EMPID := 2;
    managers(EMPID);
END;
/

--4.3 STORED PROCEDURE OUTPUT PARAMETERS
create or replace PROCEDURE NAMEANDCOMPANY 
(S OUT SYS_REFCURSOR, CUS_ID IN NUMBER) 
IS 
BEGIN
OPEN S FOR
  SELECT FIRSTNAME, LASTNAME, COMPANY
  FROM CUSTOMER
  WHERE CUSTOMERID = CUS_ID;
END;
/

SET SERVEROUTPUT ON;
DECLARE
S SYS_REFCURSOR;
CUS_ID CUSTOMER.CUSTOMERID%TYPE;
FNAME CUSTOMER.FIRSTNAME%TYPE;
LNAME CUSTOMER.LASTNAME%TYPE;
COMP CUSTOMER.COMPANY%TYPE;
BEGIN
    CUS_ID := 1;
    NAMEANDCOMPANY(S, CUS_ID);
    FETCH S INTO FNAME, LNAME, COMP;
    DBMS_OUTPUT.PUT_LINE('NAME: '||FNAME||' '||LNAME||' COMPANY: '||COMP);
    CLOSE S;
END;
/

--5.0 TRANSACTION 
CREATE OR REPLACE PROCEDURE DELETE_INVOICE
(ID IN INVOICE.INVOICEID%TYPE)
IS
BEGIN
    DELETE INVOICELINE WHERE INVOICEID = ID;
    DELETE INVOICE WHERE INVOICEID = ID;

    COMMIT;
END;
/
DECLARE
ID INVOICE.INVOICEID%TYPE;
BEGIN
    ID := 2;
    DELETE_INVOICE(ID);
    DBMS_OUTPUT.PUT_LINE('INVOICE: '||ID||' DELETED');
END;
/

CREATE OR REPLACE PROCEDURE CREATE_CUSTOMER
IS
BEGIN
    INSERT INTO CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL) VALUES (62, 'JACK', 'SMITH', 'EMAIL@DOMAIN.COM');
    COMMIT;
END;
/
EXECUTE CREATE_CUSTOMER;

--6.1 AFTER/FOR
CREATE OR REPLACE TRIGGER EMP_TRIGGER
BEFORE INSERT
    ON EMPLOYEE
    FOR EACH ROW
DECLARE
BEGIN
    DELETE FROM EMPLOYEE WHERE EMPLOYEEID = :NEW.EMPLOYEEID -1;
END;
/
INSERT INTO EMPLOYEE (EMPLOYEEID, LASTNAME, FIRSTNAME, EMAIL) VALUES(11, 'ERRED', 'TRIGG', 'WOW@EMAIL.COM');

CREATE OR REPLACE TRIGGER ALBUM_TRIGGER
AFTER UPDATE 
    ON ALBUM
    FOR EACH ROW
DECLARE
BEGIN
    INSERT INTO TRACK 
    (TRACKID, NAME, ALBUMID, MEDIATYPEID, MILLISECONDS, UNITPRICE) 
    VALUES 
    (4000, 'TRIGGERED', 2, 3, 3, 0.99);
END;
/
UPDATE ALBUM
SET TITLE = 'TRIGGER UPDATE'
WHERE TITLE = 'Aquaman';

CREATE OR REPLACE TRIGGER CUSTOMER_TRIGGER
AFTER DELETE
    ON CUSTOMER
    FOR EACH ROW
DECLARE
BEGIN
    INSERT INTO GENRE
    (GENREID, NAME)
    VALUES
    (30, 'BOOMPOW');
END;
/
DELETE FROM INVOICELINE WHERE INVOICEID IN (
    SELECT INVOICE.INVOICEID FROM INVOICE
    JOIN CUSTOMER 
    ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID
    WHERE CUSTOMER.CUSTOMERID = 6
);
DELETE FROM INVOICE WHERE CUSTOMERID = 6;
DELETE FROM CUSTOMER WHERE CUSTOMERID = 6;

--7.1 INNER
SELECT CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, INVOICE.INVOICEID
FROM CUSTOMER
INNER JOIN INVOICE
ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

--7.2 OUTER
SELECT INVOICE.CUSTOMERID, FIRSTNAME, LASTNAME, INVOICEID, TOTAL
FROM CUSTOMER
FULL OUTER JOIN INVOICE
ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

--7.3 RIGHT
SELECT NAME, TITLE
FROM ARTIST
RIGHT OUTER JOIN ALBUM
ON ALBUM.ARTISTID = ARTIST.ARTISTID;

--7.4 CROSS
SELECT * 
FROM ARTIST
CROSS JOIN ALBUM
ORDER BY NAME ASC;

--7.5 SELF
SELECT * 
FROM EMPLOYEE A, EMPLOYEE B
WHERE A.EMPLOYEEID = B.REPORTSTO;