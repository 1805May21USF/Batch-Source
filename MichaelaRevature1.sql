SELECT * FROM EMPLOYEE;

SELECT * FROM EMPLOYEE WHERE(LASTNAME = 'King');

SELECT * FROM EMPLOYEE WHERE FIRSTNAME = 'Andrew' AND REPORTSTO is NULL;

SELECT * FROM ALBUM ORDER BY TITLE DESC;

SELECT FIRSTNAME FROM CUSTOMER ORDER BY CITY ASC;

--DELETE FROM INVOICELINE
--WHERE EXISTS (SELECT * FROM INVOICE 
--  INNER JOIN INVOICELINE ON (INVOICE.INVOICEID = INVOICELINE.INVOICEID) 
--  WHERE INVOICE.CUSTOMERID = 32);

--  delete from INVOICELINE
--      where INVOICEID in (
--           select INVOICEID from INVOICE
--                where CUSTOMERID = 32;
--    delete from INVOICE where INVOICEID= 32;
/*CREATE SEQUENCE my_seq;

SELECT my_seq.NEXTVAL FROM DUAL; -- to get the next value

-- use in a trigger for your table demo
CREATE OR REPLACE TRIGGER demo_increment 
BEFORE INSERT ON demo
FOR EACH ROW

BEGIN
  SELECT my_seq.NEXTVAL
  INTO   :new.id
  FROM   dual;
END;

CREATE VIEW MYVIEW AS SELECT TITLE FROM ALBUM UNION 
SELECT NAME FROM ARTIST;

SELECT * FROM MYVIEW;
*/

INSERT INTO GENRE (GENREID, NAME) VALUES (26, 'Indie'); 

INSERT INTO GENRE (GENREID, NAME) VALUES (27, 'Africa by Toto');

INSERT INTO EMPLOYEE (EMPLOYEEID, LASTNAME, FIRSTNAME, TITLE, REPORTSTO, BIRTHDATE, HIREDATE,
ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL) VALUES ( 9, 'Hey', 'Bon', 
'IT Staff', 6, 14-Aug-92, 14-Aug-02, '12 Ava Ave S', 'Calgary', 'AB', 'Canada', '85882',
'123-456-7890', '123-456-7899', 'biff@biff.net');
INSERT INTO EMPLOYEE (EMPLOYEEID, LASTNAME, FIRSTNAME, TITLE, REPORTSTO, BIRTHDATE, HIREDATE,
ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL) VALUES ( 10, 'Worth', 'Ducky', 
'IT Staff', 6, 13-Aug-92, 18-Dec-03, '156 Connor Ave N', 'Calgary', 'AB', 
'Canada', '85882', '800-588-2300', '1-800-STE-EMER', 'hi@mypersonalwebsite.net');

INSERT INTO CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY, ADDRESS, CITY, STATE, COUNTRY,
POSTALCODE, PHONE, FAX, EMAIL, SUPPORTERID) VALUES (60, 'Joe', 'Kail', null, '2033 Hey Street',
'San Diego', 'CA', 'USA', '94047', '+1 (564) 239-7483', null, 'hi@hello.com', 3);
INSERT INTO CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY, ADDRESS, CITY, STATE, COUNTRY,
POSTALCODE, PHONE, FAX, EMAIL, SUPPORTERID) VALUES (61, 'Joe', 'Mick', null, '2033 Hello Street',
'San San Fransokyo', 'CA', 'USA', '65457', '+1 (564) 445-7483', null, 'imnotfriendly@hello.com', 5);

UPDATE CUSTOMER SET FIRSTNAME = 'Robert', LASTNAME = 'Walter' WHERE 
FIRSTNAME = 'Aaron' AND LASTNAME = 'Mitchell';

UPDATE ARTIST SET NAME = 'CCR' WHERE (NAME = 'Creedence Clearwater Revival');

SELECT * FROM INVOICE WHERE BILLINGADDRESS LIKE("T%");

SELECT * FROM INVOICE WHERE TOTAL BETWEEN 15 AND 50;

SELECT * FROM EMPLOYEE WHERE HIREDATE BETWEEN TO_DATE('01/06/2003', 'DD/MM/YYYY') AND 
TO_DATE('01/03/2004', 'DD/MM/YYYY');


ALTER TABLE INVOICE DROP CONSTRAINT FK_INVOICECUSTOMERID;

ALTER TABLE INVOICE
ADD CONSTRAINT FK_INVOICECUSTOMERID
FOREIGN KEY(CUSTOMERID)
REFERENCES CUSTOMER(CUSTOMERID)
ON DELETE CASCADE;

ALTER TABLE INVOICELINE DROP CONSTRAINT FK_INVOICELINEINVOICEID;

ALTER TABLE INVOICELINE
ADD CONSTRAINT FK_INVOICELINEINVOICEID
FOREIGN KEY(INVOICEID)
REFERENCES INVOICE(INVOICEID)
ON DELETE CASCADE;

DELETE FROM CUSTOMER WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter';



CREATE OR REPLACE FUNCTION GETCURRENTTIME
RETURN TIMESTAMP IS 
BEGIN
RETURN LOCALTIMESTAMP;
END; 
/
SELECT GETCURRENTTIME() from dual;

CREATE OR REPLACE FUNCTION GETMEDIALENGTH
(MNAME IN VARCHAR2)
RETURN NUMBER IS
BEGIN
RETURN LENGTH(MNAME);
END; 
/

SELECT GETMEDIALENGTH(NAME) FROM MEDIATYPE;

CREATE OR REPLACE FUNCTION AVGINV
RETURN FLOAT IS AVGI FLOAT;
BEGIN
SELECT AVG(TOTAL) INTO AVGI FROM INVOICE;
RETURN AVGI;
END; 
/

SELECT AVGINV() FROM DUAL;

CREATE OR REPLACE FUNCTION MOSTEXPENSIVE
RETURN VARCHAR2 IS CORRTRACK VARCHAR2(100);
BEGIN 
    SELECT NAME INTO CORRTRACK FROM (SELECT * FROM TRACK 
    ORDER BY UNITPRICE DESC) 
    WHERE ROWNUM = 1;
    RETURN CORRTRACK;
END;
/

SELECT MOSTEXPENSIVE() FROM DUAL;


CREATE OR REPLACE FUNCTION AVGINVL
RETURN FLOAT IS AVGI FLOAT;
BEGIN
SELECT AVG(UNITPRICE) INTO AVGI FROM INVOICELINE;
RETURN AVGI;
END; 
/

SELECT AVGINVL() FROM DUAL;

CREATE OR REPLACE FUNCTION YOUNGEMPL
RETURN T_TABLE AS TAB T_TABLE;
BEGIN
TAB := T_TABLE();

RETURN TAB;
END; 
/

SELECT AVGINVL() FROM DUAL;


--SELECT NAME, UNITPRICE FROM TRACK WHERE UNITPRICE = (SELECT MAX(UNITPRICE) FROM TRACK);
--SELECT * FROM (SELECT * FROM TRACK 
--ORDER BY UNITPRICE DESC) 
--WHERE ROWNUM = 1;
--EXECUTE GETCURRENTTIME();


--ALTER TABLE CUSTOMER A

--CREATE OR REPLACE FUNCTION CALC_TAX
--(T_ID IN NUMBER, TAX IN NUMBER)
--RETURN NUMBER AS 
--TOTAL_PRICE NUMBER(10,2);
--BEGIN
--SELECT UNITPRICE INTO TOTAL_PRICE
--FROM TRACK WHERE TRACKID = T_ID;
--RETURN TOTAL_PRICE + (TOTAL_PRICE * TAX);
--END; 
--/

--CREATE OR REPLACE PROCEDURE MYFAKEPRO
--(ID IN INT, NAME IN VARCHAR2)
--AS 
--BEGIN
--INSERT INTO SCHOOL VALUES(ID, NAME);
--COMMIT;
--END;
--/
--EXECUTE MYFAKEPRO(88, 'USF');

--CREATE TABLE DUMMY(
--DUMMYID INT,
--NAME VARCHAR2(50),
--DONEWITHTHISSHIT CHAR
--);
--
--CREATE OR REPLACE PROCEDURE MYFAKEPRO
--(DUMMYID IN INT,  NAME IN VARCHAR2, DONEWITHTHISSHIT IN CHAR)
--AS 
--BEGIN
--INSERT INTO DUMMY VALUES(DUMMYID, NAME, DONEWITHTHISSHIT);
--COMMIT;
--END;
--/
--EXECUTE MYFAKEPRO(1, 'Michaela', 'Y');

--add sequence to where 88 is to auto increment: MYSEQ.NEXTVAL

--CREATE OR REPLACE BEARPRO
--(CAVE_NAME IN VARCHAR2, BEAR_NAME IN VARCHAR2, BEAR_BIRTHDATE IN DATE, CAVE_ID AS NUMBER)
--AS
--BEGIN 
--INSERT INTO CAVE VALUES(MYSEQ.NEXTVAL, CAVE_NAME);
--INSERT INTO BEEHIVE VALUES (MYSEQ.NEXTVAL, 50);
--INSERT INTO BEAR VALUES (MYSEQ.NEXTVAL, 1, BEAR_NAME, BEAR_BIRTHDATE, 200, CAVE_ID);
--COMMIT;
--END;
--/
--EXECUTE BEARPRO('WOO', 'PERT', DATE '1999-08-08', 1);
/*
DESC CUSTOMER;
*/


CREATE OR REPLACE PROCEDURE GET_ALL_ALBUMS(S OUT SYS_REFCURSOR)
IS 
BEGIN
OPEN S FOR SELECT ALBUMID, TITLE FROM ALBUM;
END;
/

DECLARE
S SYS_REFCURSOR;
ALBUM_ID ALBUM.ALBUMID%TYPE; --SET ALBUM_ID AS WHATEVER DATATYPE  ALBUMID IS
ALBUMNAME ALBUM.TITLE%TYPE;
BEGIN
GET_ALL_ALBUMS(S);
LOOP
FETCH S INTO ALBUM_ID,ALBUMNAME;
EXIT WHEN S%NOTFOUND; --BREAK OUT OF LOOP WHEN NO MORE ROWS ARE AVAILABLE
DBMS_OUTPUT.PUT_LINE(ALBUM_ID||' IS CURRENT ID,'|| ALBUMNAME||'IS CURRENT NAME');
END LOOP;
CLOSE S;
END;
/

SET SERVEROUTPUT ON;

DROP TYPE t_tf_tab;
create table t_tf_row as ( select * from EMPLOYEE); 

CREATE TYPE t_tf_row AS OBJECT (
  id           NUMBER,
  description  VARCHAR2(50)
);
/

--CREATE TYPE t_tf_tab IS TABLE OF t_tf_row;


SET SERVEROUTPUT ON;
DECLARE
S SYS_REFCURSOR;
Young_Person_ID EMPLOYEE.EMPLOYEEID%TYPE;
Birth_Date EMPLOYEE.BIRTHDATE%TYPE;
BEGIN
   get_birthdays(S);
LOOP
FETCH S INTO Young_Person_ID,Birth_Date;
EXIT WHEN S%NOTFOUND;
DBMS_OUTPUT.PUT_LINE(Young_Person_ID || ' ' || Birth_Date);
END LOOP;
CLOSE S;
END;
/

CREATE OR REPLACE FUNCTION get_birthdays
   return sys_refcursor
as
   S sys_refcursor;
begin
   OPEN S FOR
   SELECT EmployeeID, Birthdate
   FROM employee
   where TRUNC(birthdate) >= to_date('01-JAN-1968', 'DD-MM-YYYY');
return S;
end get_birthdays;
/

CREATE OR REPLACE PROCEDURE WOW_PROCEDURE2 
(FNAME IN EMPLOYEE.FIRSTNAME%TYPE) IS
BEGIN
 UPDATE EMPLOYEE SET FIRSTNAME = FNAME
 WHERE EMPLOYEEID = 2;
COMMIT;
END;
/

EXECUTE WOW_PROCEDURE2('JOE');

CREATE OR REPLACE PROCEDURE WOW_PROCEDURE3(prc out sys_refcursor, IDD in CUSTOMER.CUSTOMERID%TYPE)
IS
BEGIN
   open prc for select FIRSTNAME, COMPANY from CUSTOMER WHERE IDD = CUSTOMER.CUSTOMERID;
END;
/

S SYS_REFCURSOR

FIRSTNAME                                COMPANY

CREATE OR REPLACE PROCEDURE WOW_PROCEDURE3
(IDD in CUSTOMER.CUSTOMERID%TYPE)
AS
S SYS_REFCURSOR;
BEGIN
  open S for select FIRSTNAME, COMPANY from CUSTOMER WHERE IDD = CUSTOMER.CUSTOMERID AND COMPANY IS NOT NULL;
   DBMS_SQL.RETURN_RESULT(S);
END;
/

EXECUTE WOW_PROCEDURE3(5);

COMMIT;
START TRANSACTION
DELETE
FROM INVOICEline
WHERE INVOICEID = 1;
DELETE
FROM INVOICE
WHERE INVOICEID = 1;
COMMIT;




create table TEMPEMP( employeeid number(10),
firstname varchar(25),
lastname varchar(25)
);


CREATE OR REPLACE EMPTRIGGER
AFTER INSERT ON EMPLOYEE FOR EACH ROW
BEGIN
INSERT INTO TEMPEMP values (:NEW.EMPLOYEEID, :NEW.FIRSTNAME, :NEW.LASTNAME);
END;
/


CREATE TABLE NEWALBUMS(
ARTISTID NUMBER(10),
TITLE VARCHAR(20));

CREATE OR REPLACE TRIGGER ALUPTRIGG
AFTER UPDATE ON ALBUM FOR EACH ROW
BEGIN
        INSERT INTO NEWALBUMS
        VALUES( :NEW.ARTISTID, :NEW.TITLE);
END;
/


CREATE TABLE NONCUSTOMERS(
CUSTOMERID NUMBER,
FIRSTNAME VARCHAR(20),
LASTNAME VARCHAR(20));

CREATE OR REPLACE TRIGGER DELETETRIGGER
AFTER DELETE ON CUSTOMER
FOR EACH ROW
begin
BEGIN
IF DELETING THEN
INSERT INTO NONCUSTOMERS
VALUES(:NEW.CUSTOMERID, :NEW.FIRSTNAME, :NEW.LASTNAME);
END IF;
END;

SELECT INVOICE.INVOICEID, CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME
FROM INVOICE
INNER JOIN CUSTOMER
ON INVOICE.CUSTOMERID = CUSTOMER.CUSTOMERID
ORDER BY CUSTOMER.LASTNAME;


SELECT INVOICE.INVOICEID, CUSTOMER.CUSTOMERID,
CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME FROM INVOICE
FULL OUTER JOIN CUSTOMER
ON INVOICE.CUSTOMERID = CUSTOMER.CUSTOMERID
ORDER BY CUSTOMER.LASTNAME;


SECLECT ARTIST."NAME", ALBUM.TITLE
FROM ALBUM
RIGHT JOIN ARTIST 
ON ALBUM.ARTISTID = ARTIST.ARTISTID;


SELECT * FROM ARTIST;
SELECT ALBUM.TITLE, ARTIST."NAME" FROM ALBUM
CROSS JOIN ARTIST ORDER BY "NAME" ASC;

SELECT e1.FIRSTNAME||' works for '||e2.FIRSTNAME
   "Employees and Their Managers"
   FROM EMPLOYEE e1, EMPLOYEE e2
   WHERE e1.REPORTSTO = e2.EMPLOYEEID;


