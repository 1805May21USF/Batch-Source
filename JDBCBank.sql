--USER ACCOUNT TABLE
CREATE TABLE USER_ACCOUNT (
USER_ID INTEGER PRIMARY KEY,
USERNAME VARCHAR2(100) NOT NULL UNIQUE,
FIRSTNAME VARCHAR2(100) NOT NULL,
LASTNAME VARCHAR2(100) NOT NULL,
PASS_WORD VARCHAR2(100) NOT NULL,
STATUS INTEGER NOT NULL
);

--BANK ACCOUNT TABLE
CREATE TABLE BANK_ACCOUNT (
ACCOUNT_NUMBER INTEGER PRIMARY KEY,
BALANCE NUMBER(15,2) NOT NULL,
ACCOUNT_STATUS VARCHAR2(100) NOT NULL,
USER_ID INTEGER NOT NULL
);

--CREATING A CONSTRAINT USING THE USER_ID FOR THE BANK ACCOUNT
ALTER TABLE BANK_ACCOUNT
ADD CONSTRAINT FK_BANK_ACCOUNT_CUSTOMER_ID
FOREIGN KEY (USER_ID) REFERENCES USER_ACCOUNT(USER_ID)
ON DELETE CASCADE;

--LOOKUP TABLE FOR THE USER STATUS
CREATE TABLE STATUS_LOOKUP (
STATUS_NUMBER INTEGER PRIMARY KEY,
STATUS_TYPE VARCHAR2(100)
);

--STATUS AND TYPES FOR THE STATUS_LOOKUP
INSERT INTO STATUS_LOOKUP VALUES(0,'INACTIVE');
INSERT INTO STATUS_LOOKUP VALUES(1,'CUSTOMER');
INSERT INTO STATUS_LOOKUP VALUES(2,'EMPLOYEE');
INSERT INTO STATUS_LOOKUP VALUES(3,'ADMIN');

--DROP TABLES
--DROP TABLE USER_ACCOUNT;
--DROP TABLE BANK_ACCOUNT;
--DROP TABLE STATUS_LOOKUP;

--SEQUENCES
CREATE SEQUENCE USERSEQ;
CREATE SEQUENCE ACCOUNTSEQ; 

--STORED PROCEDURES
CREATE OR REPLACE PROCEDURE DELETE_ACCOUNT(ACCOUNTNUMBER IN INTEGER)
AS BEGIN
DELETE FROM BANK_ACCOUNT B WHERE B.ACCOUNT_NUMBER = ACCOUNTNUMBER;
COMMIT;
END;
/
--DROP SEQUENCES
--DROP SEQUENCE USERSEQ;
--DROP SEQUENCE ACCOUNTSEQ;

--INSERT INTO USER_ACCOUNT VALUES(USERSEQ.NEXTVAL,'ADMIN','ADMIN','ADMIN','ADMIN',3);
--INSERT INTO USER_ACCOUNT VALUES(USERSEQ.NEXTVAL,'Test','TEST','TEST','TEST',1);

--UPDATE USER_ACCOUNT
--SET USERNAME = 'ANOTHERTEST'
--WHERE USERNAME = 'Test';
--
--UPDATE BANK_ACCOUNT
--SET BALANCE = 400
--WHERE ACCOUNT_NUMBER = 1;
--
--SELECT * FROM USER_ACCOUNT;