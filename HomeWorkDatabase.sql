--2.1
SELECT * FROM EMPLOYEE;

SELECT * FROM EMPLOYEE
WHERE LASTNAME='King';

SELECT * FROM EMPLOYEE
WHERE FIRSTNAME='Andrew' and REPORTSTO is null;

--2.2
SELECT * FROM ALBUM
ORDER BY TITLE DESC;

SELECT FIRSTNAME FROM CUSTOMER
ORDER BY CITY ASC;

--2.3
INSERT INTO GENRE VALUES(26, 'Death Metal');
INSERT INTO GENRE VALUES(27, 'Folk Metal');

INSERT INTO EMPLOYEE (EMPLOYEEID,LASTNAME, FIRSTNAME) VALUES(10, 'DOE', 'JOHN');
INSERT INTO EMPLOYEE (EMPLOYEEID,LASTNAME, FIRSTNAME) VALUES(9, 'DOE', 'JANE');

SELECT * FROM CUSTOMER;
INSERT INTO CUSTOMER (CUSTOMERID,LASTNAME, FIRSTNAME, EMAIL) VALUES(60, 'DOE', 'JOHN', 'JON@WORK.COM');
INSERT INTO CUSTOMER (CUSTOMERID,LASTNAME, FIRSTNAME, EMAIL) VALUES(61, 'DOE', 'JANE', 'JANE@WORK.COM');

--2.4
UPDATE CUSTOMER
SET FIRSTNAME ='Robert', LASTNAME='Walter'
WHERE FIRSTNAME='Aaron' and LASTNAME='Mitchell';

UPDATE ARTIST
SET NAME='CCR'
WHERE NAME='Creedence Clearwater Revival';

--2.5
SELECT * FROM INVOICE
WHERE BILLINGADDRESS LIKE 'T%';

--2.6
SELECT * FROM INVOICE
WHERE TOTAL BETWEEN 15 AND 50;

SELECT * FROM EMPLOYEE
WHERE HIREDATE BETWEEN DATE'2003-06-01' AND DATE'2004-05-01';

--2.7
ALTER TABLE INVOICE DROP CONSTRAINT FK_INVOICECUSTOMERID;

ALTER TABLE INVOICE
ADD CONSTRAINT FK_INVOICECUSTOMERID
FOREIGN KEY(CUSTOMERID)
REFERENCES CUSTOMER(CUSTOMERID)
ON DELETE CASCADE;

ALTER TABLE INVOICELINE DROP CONSTRAINT FK_INVOICELINEINVOICEID;

ALTER TABLE INVOICELINE
ADD CONSTRAINT FK_INVOICELINEINVOICEID
FOREIGN KEY(INVOICEID)
REFERENCES INVOICE(INVOICEID)
ON DELETE CASCADE;

DELETE FROM CUSTOMER
WHERE FIRSTNAME='Robert' AND LASTNAME='Walter';


--3.1
CREATE OR REPLACE FUNCTION GET_TIME
RETURN VARCHAR2 IS THE_TIME VARCHAR(10);
BEGIN
SELECT TO_CHAR(SYSDATE, 'HH24:MI:SS') INTO THE_TIME FROM DUAL;
RETURN(THE_TIME);
END;
/
SELECT GET_TIME FROM DUAL;


CREATE OR REPLACE FUNCTION get_length(str IN STRING)
RETURN NUMBER IS BEGIN RETURN LENGTH(str);
END get_length;  
/
SELECT get_length(NAME) FROM MEDIATYPE;

--3.2
CREATE OR REPLACE FUNCTION GET_AVG
RETURN NUMBER IS THE_AVG NUMBER(5);
BEGIN
SELECT AVG(TOTAL) INTO THE_AVG FROM INVOICE;
RETURN THE_AVG;
END;
/
SELECT GET_AVG FROM DUAL;

CREATE OR REPLACE FUNCTION GET_MAX_VAL
RETURN NUMBER IS THE_MAX NUMBER(5,4);
BEGIN
SELECT MAX(UNITPRICE) INTO THE_MAX FROM TRACK;
RETURN THE_MAX;
END;
/
SELECT GET_MAX_VAL FROM DUAL;

--3.3
CREATE OR REPLACE FUNCTION GET_AVG_PRICE
RETURN NUMBER IS THE_AVG_PRICE NUMBER(5,4);
BEGIN
SELECT AVG(UNITPRICE) INTO THE_AVG_PRICE FROM INVOICELINE;
RETURN THE_AVG_PRICE;
END;
/
SELECT GET_AVG_PRICE FROM DUAL;

--3.4
SELECT BIRTHDATE FROM EMPLOYEE WHERE BIRTHDATE >= DATE'1969-01-01';

--4.1
CREATE OR REPLACE PROCEDURE SELECTEMPLOYEES
(RECORDS OUT SYS_REFCURSOR)
AS
BEGIN
OPEN RECORDS FOR
SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE;
COMMIT;
END;
/

--4.2
CREATE OR REPLACE PROCEDURE UPDATE_EMPLOYEE
(IN_EMPLOYEEID IN NUMBER, IN_ADDRESS IN VARCHAR2, IN_CITY IN VARCHAR2, IN_STATE IN VARCHAR2)
AS
BEGIN
UPDATE EMPLOYEE SET ADDRESS=IN_ADDRESS, CITY=IN_CITY, STATE=IN_STATE WHERE EMPLOYEEID=IN_EMPLOYEEID;
COMMIT;
END;
/

--4.3
CREATE OR REPLACE PROCEDURE NAME_COMPANY
(RECORDS OUT SYS_REFCURSOR)
AS
BEGIN
OPEN RECORDS FOR
SELECT FIRSTNAME, LASTNAME, COMPANY FROM CUSTOMER;
COMMIT;
END;
/

--5.0
CREATE OR REPLACE PROCEDURE DELETEINVOICE
(IN_INVOICEID IN NUMBER)
AS
BEGIN
DELETE FROM INVOICE WHERE INVOICEID=IN_INVOICEID;
COMMIT;
END;
/
EXECUTE DELETEINVOICE(111);

CREATE OR REPLACE PROCEDURE INSERTCUSTOMER
(CUSID IN NUMBER, 
FNAME IN VARCHAR2, 
LNAME IN VARCHAR2, 
COMPANY IN VARCHAR2,
ADDR IN VARCHAR2,
CITY IN VARCHAR2,
STATE IN VARCHAR2,
COUNTRY IN VARCHAR2,
POSTAL IN VARCHAR2,
PHONE IN VARCHAR2,
FAX IN VARCHAR2,
EMAIL IN VARCHAR2,
SUPPID IN NUMBER)
AS
BEGIN
INSERT INTO CUSTOMER VALUES(CUSID, FNAME, 
LNAME, COMPANY, ADDR, CITY, STATE, COUNTRY, 
POSTAL, PHONE, FAX, EMAIL, SUPPID);
COMMIT;
END;
/

--6.1
CREATE OR REPLACE TRIGGER AFTERINSERTEMPLOY
AFTER INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN
DBMS_OUTPUT.PUT_LINE('ADDING NEW EMPLOYEE');
END;
/

CREATE OR REPLACE TRIGGER AFTERUPDATEALBUM
AFTER UPDATE ON ALBUM
FOR EACH ROW
BEGIN
DBMS_OUTPUT.PUT_LINE('UPDATED A ALBUM');
END;
/

CREATE OR REPLACE TRIGGER AFTERDELETECUSTOMER
AFTER DELETE ON CUSTOMER
FOR EACH ROW
BEGIN
DBMS_OUTPUT.PUT_LINE('ROW DELETE FROM CUSTOMER');
END;
/
--7.1
SELECT CUSTOMER.FIRSTNAME,CUSTOMER.LASTNAME, INVOICE.INVOICEID
FROM CUSTOMER
INNER JOIN INVOICE ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

--7.2
SELECT CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, INVOICE.INVOICEID, INVOICE.TOTAL
FROM CUSTOMER
FULL OUTER JOIN INVOICE ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

--7.3
SELECT ARTIST.NAME, ALBUM.TITLE
FROM ARTIST 
RIGHT OUTER JOIN ALBUM ON ARTIST.ARTISTID = ALBUM.ARTISTID;

--7.4
SELECT * FROM ALBUM CROSS JOIN ARTIST
ORDER BY TITLE ASC;

--7.5
SELECT * FROM EMPLOYEE A, EMPLOYEE B
WHERE A.REPORTSTO = B.REPORTSTO;