--2.1 SELECT
SELECT * FROM EMPLOYEE;

SELECT * FROM EMPLOYEE WHERE LASTNAME = 'King';

SELECT * FROM EMPLOYEE WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL;

--2.2 ORDER BY
SELECT * FROM ALBUM ORDER BY TITLE DESC;

SELECT FIRSTNAME FROM CUSTOMER ORDER BY CITY ASC;

--2.3 INSERT INTO
INSERT INTO GENRE (GENREID, NAME) VALUES (26, 'NewGenre1');
INSERT INTO GENRE (GENREID, NAME) VALUES (27, 'NewGenre2');


INSERT INTO EMPLOYEE (EMPLOYEEID, FIRSTNAME, LASTNAME) VALUES (9, 'Rick', 'James');
INSERT INTO EMPLOYEE (EMPLOYEEID, FIRSTNAME, LASTNAME) VALUES (10, 'Mickey', 'Mouse');

INSERT INTO CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL) VALUES (60, 'Zeke', 'Elliot', 'FeedZeke@dallascowboys.com');
INSERT INTO CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL) VALUES (61, 'Dak', 'Prescott', 'DakAttack@dallascowboys.com');


--2.4 UPDATE
UPDATE CUSTOMER
SET FIRSTNAME = 'Robert', LASTNAME = 'Walter'
WHERE FIRSTNAME = 'Aaron' AND LASTNAME = 'Mitchell';

UPDATE ARTIST
SET NAME = 'CCR'
WHERE NAME = 'Creedence Clearwater Revival';

--2.5 LIKE
SELECT * FROM INVOICE WHERE BILLINGADDRESS LIKE 'T%';

--2.6 BETWEEN
SELECT * FROM INVOICE WHERE TOTAL BETWEEN 15 AND 50;

SELECT * FROM EMPLOYEE WHERE HIREDATE BETWEEN '01-JUN-03' AND '01-MAR-04';

--2.7 DELETE
DELETE FROM INVOICELINE WHERE INVOICEID = 50;
DELETE FROM INVOICELINE WHERE INVOICEID = 61;
DELETE FROM INVOICELINE WHERE INVOICEID = 342;
DELETE FROM INVOICELINE WHERE INVOICEID = 116;
DELETE FROM INVOICELINE WHERE INVOICEID = 245;
DELETE FROM INVOICELINE WHERE INVOICEID = 268;
DELETE FROM INVOICELINE WHERE INVOICEID = 290;
DELETE FROM INVOICE WHERE CUSTOMERID = 32;
DELETE FROM CUSTOMER WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter';

--3.1 SYSTEM DEFINED FUNCTIONS
CREATE OR REPLACE FUNCTION GET_TIME 
RETURN VARCHAR2 AS GET_TIME VARCHAR(260);
BEGIN
    SELECT TO_CHAR(SYSDATE, 'HH24:MI:SS') INTO GET_TIME FROM DUAL; --hh:mm:ss
    RETURN GET_TIME;
END;
/

CREATE OR REPLACE FUNCTION GET_MAX
RETURN NUMBER IS MAX_VAL NUMBER(5,4);
BEGIN
SELECT MAX(UNITPRICE) INTO MAX_VAL FROM TRACK;
RETURN MAX_VAL;
END;
/
SELECT GET_MAX FROM DUAL;

--3.3
CREATE OR REPLACE FUNCTION GET_AVG
RETURN NUMBER IS AVG_PRICE NUMBER(5,4);
BEGIN
SELECT AVG(UNITPRICE) INTO AVG_PRICE FROM INVOICELINE;
RETURN AVG_PRICE;
END;
/
SELECT GET_AVG FROM DUAL;

--3.4
SELECT BIRTHDATE FROM EMPLOYEE WHERE BIRTHDATE >= DATE'1969-01-01';

--4.1
CREATE OR REPLACE PROCEDURE SELECTEMPLOYEES
(RECORDS OUT SYS_REFCURSOR)
AS
BEGIN
OPEN RECORDS FOR
SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE;
COMMIT;
END;
/

--4.2
CREATE OR REPLACE PROCEDURE UPDATE_EMP
(EMP_ID IN NUMBER, EMP_ADDR IN VARCHAR2, EMP_CITY IN VARCHAR2, EMP_STATE IN VARCHAR2)
AS
BEGIN
UPDATE EMPLOYEE SET ADDRESS=EMP_ADDR, CITY=EMP_CITY, STATE=EMP_STATE WHERE EMPLOYEEID=EMP_ID;
COMMIT;
END;
/

--4.3
CREATE OR REPLACE PROCEDURE NAME_COMPANY
(RECORDS OUT SYS_REFCURSOR)
AS
BEGIN
OPEN RECORDS FOR
SELECT FIRSTNAME, LASTNAME, COMPANY FROM CUSTOMER;
COMMIT;
END;
/

--5.0
CREATE OR REPLACE PROCEDURE DELETE_INVOICE
(INVOICE_ID IN NUMBER)
AS
BEGIN
DELETE FROM INVOICE WHERE INVOICEID=INVOICE_ID;
COMMIT;
END;
/
EXECUTE DELETE_INVOICE(111);

CREATE OR REPLACE PROCEDURE INSERTCUSTOMER
(CUSID IN NUMBER, 
FNAME IN VARCHAR2, 
LNAME IN VARCHAR2, 
COMPANY IN VARCHAR2,
ADDR IN VARCHAR2,
CITY IN VARCHAR2,
STATE IN VARCHAR2,
COUNTRY IN VARCHAR2,
POSTAL IN VARCHAR2,
PHONE IN VARCHAR2,
FAX IN VARCHAR2,
EMAIL IN VARCHAR2,
SUPPID IN NUMBER)
AS
BEGIN
INSERT INTO CUSTOMER VALUES(CUSID, FNAME, 
LNAME, COMPANY, ADDR, CITY, STATE, COUNTRY, 
POSTAL, PHONE, FAX, EMAIL, SUPPID);
COMMIT;
END;
/

--6.1

--7.1
SELECT CUSTOMER.FIRSTNAME,CUSTOMER.LASTNAME, INVOICE.INVOICEID
FROM CUSTOMER
INNER JOIN INVOICE ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

--7.2
SELECT CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, INVOICE.INVOICEID, INVOICE.TOTAL
FROM CUSTOMER
FULL OUTER JOIN INVOICE ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

--7.3
SELECT ARTIST.NAME, ALBUM.TITLE
FROM ARTIST 
RIGHT OUTER JOIN ALBUM ON ARTIST.ARTISTID = ALBUM.ARTISTID;

--7.4
SELECT * FROM ALBUM CROSS JOIN ARTIST
ORDER BY TITLE ASC;

--7.5
SELECT * FROM EMPLOYEE A, EMPLOYEE B
WHERE A.REPORTSTO = B.REPORTSTO;



